{"version":3,"sources":["App.js","index.js"],"names":["App","state","tasks","formValue","validationError","this","socket","io","on","newTasks","upDate","setState","event","target","value","length","e","preventDefault","alredyExist","some","message","emit","id","toDelet","upDatedMessages","filter","console","log","className","map","key","onClick","removeTask","onSubmit","autoComplete","type","placeholder","onChange","handleChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"wSAgFeA,E,2MA5EbC,MAAQ,CACNC,MAAO,GACPC,UAAW,GACXC,iBAAiB,G,mFAGE,IAAD,OAClBC,KAAKC,OAASC,IAAG,yBACjBF,KAAKC,OAAOE,GAAG,iBAAiB,SAAAC,GAAQ,OAAI,EAAKC,OAAOD,Q,6BAGnDA,GACLJ,KAAKM,SAAS,CAACT,MAAOO,M,mCAGXG,GACXP,KAAKM,SAAS,CAACR,UAAWS,EAAMC,OAAOC,QACpCF,EAAMC,OAAOC,MAAMC,QAAQV,KAAKM,SAAS,CAACP,iBAAiB,M,2BAG3DY,GAAI,IAAD,OACNA,EAAEC,iBACF,IAAMC,EAAcb,KAAKJ,MAAMC,MAAMiB,MAAM,gBAAEC,EAAF,EAAEA,QAAF,OAAe,EAAKnB,MAAME,WAAaiB,KAC/Ef,KAAKJ,MAAME,UAAUY,SAAWG,GACjCb,KAAKC,OAAOe,KAAK,gBAAiB,CAAED,QAASf,KAAKJ,MAAME,YACxDE,KAAKM,SAAS,CAACT,MAAM,GAAD,mBAAMG,KAAKJ,MAAMC,OAAjB,CAAwB,CAACkB,QAASf,KAAKJ,MAAME,UAAWmB,GAAIjB,KAAKC,OAAOgB,QAC5FjB,KAAKM,SAAS,CAACR,UAAW,KAC1BE,KAAKM,SAAS,CAACP,iBAAiB,KAE7BC,KAAKM,SAAS,CAACP,iBAAiB,M,iCAG5BmB,GACT,IAAMC,EAAkBnB,KAAKJ,MAAMC,MAAMuB,QAAQ,qBAAEL,SAAwBG,KAC3ElB,KAAKM,SAAS,CAACT,MAAOsB,IACtBnB,KAAKC,OAAOe,KAAK,sBAAuBG,K,+BAGjC,IAAD,OAEN,OADAE,QAAQC,IAAItB,KAAKJ,MAAMC,OAErB,yBAAK0B,UAAU,OAEb,gCACE,6CAGF,6BAASA,UAAU,gBAAgBN,GAAG,iBACpC,qCAEA,wBAAIM,UAAU,sBAAsBN,GAAG,cAClCjB,KAAKJ,MAAMC,MAAMa,OAAcV,KAAKJ,MAAMC,MAAM2B,KAAK,gBAAET,EAAF,EAAEA,QAASE,EAAX,EAAWA,GAAX,OACtD,wBAAIM,UAAU,OAAOE,IAAKR,GAAKF,EAC/B,4BAAQQ,UAAU,eAAeG,QAAS,SAAAnB,GAAUA,EAAMK,iBAAkB,EAAKe,WAAWZ,KAA5F,cAF2B,IAO/B,0BAAME,GAAG,gBAAgBW,SAAW,SAACrB,GAAD,OAAW,EAAKS,KAAKT,KACvD,2BAAOgB,UAAU,aACVM,aAAa,MACbC,KAAK,OACLC,YAAY,wBACZd,GAAG,YACHR,MAAOT,KAAKJ,MAAME,UAClBkC,SAAW,SAAAzB,GAAK,OAAI,EAAK0B,aAAa1B,MAE7C,4BAAQgB,UAAU,MAAMO,KAAK,UAA7B,QAEA9B,KAAKJ,MAAMG,iBAAmB,wBAAIwB,UAAU,SAAd,uB,GAtExBW,IAAMC,WCExBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f2872a3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    tasks: [],\r\n    formValue: '',\r\n    validationError: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.socket = io('http://localhost:8000');\r\n    this.socket.on('serverMessage', newTasks => this.upDate(newTasks));\r\n  }\r\n\r\n  upDate(newTasks){\r\n    this.setState({tasks: newTasks});\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({formValue: event.target.value});\r\n    if(event.target.value.length) this.setState({validationError: false});\r\n  }\r\n\r\n  emit(e) {\r\n    e.preventDefault();\r\n    const alredyExist = this.state.tasks.some( ({message}) => this.state.formValue == message);\r\n    if(this.state.formValue.length && !alredyExist){\r\n      this.socket.emit('clientMessage', { message: this.state.formValue });\r\n      this.setState({tasks:[ ...this.state.tasks, {message: this.state.formValue, id: this.socket.id} ]});\r\n      this.setState({formValue: ''});\r\n      this.setState({validationError: false});\r\n    }\r\n    else this.setState({validationError: true});\r\n  }\r\n\r\n  removeTask(toDelet){\r\n    const upDatedMessages = this.state.tasks.filter( ({message}) => message != toDelet);\r\n    this.setState({tasks: upDatedMessages});\r\n    this.socket.emit('clientMessageDelete', upDatedMessages);\r\n  }\r\n\r\n  render(){\r\n    console.log(this.state.tasks);\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <header>\r\n          <h1>ToDoList.app</h1>\r\n        </header>\r\n\r\n        <section className=\"tasks-section\" id=\"tasks-section\">\r\n          <h2>Tasks</h2>\r\n\r\n          <ul className=\"tasks-section__list\" id=\"tasks-list\">\r\n            { !this.state.tasks.length ? '' : this.state.tasks.map( ({message, id}) =>\r\n              <li className=\"task\" key={id}>{message}\r\n              <button className=\"btn btn--red\" onClick={event =>{ event.preventDefault(); this.removeTask(message)} }>Remove</button></li>\r\n              )\r\n            }\r\n          </ul>\r\n\r\n          <form id=\"add-task-form\" onSubmit={ (event) => this.emit(event)}>\r\n            <input className=\"text-input\"\r\n                   autoComplete=\"off\"\r\n                   type=\"text\"\r\n                   placeholder=\"Type your description\"\r\n                   id=\"task-name\"\r\n                   value={this.state.formValue}\r\n                   onChange={ event => this.handleChange(event)}\r\n            />\r\n            <button className=\"btn\" type=\"submit\">Add</button>\r\n          </form>\r\n          { this.state.validationError && <h6 className='error'>Add new task!</h6> }\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}